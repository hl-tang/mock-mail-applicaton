{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineStore } from 'pinia';\nimport axios from 'axios';\nimport { v4 as uuid } from 'uuid';\nimport { collection, onSnapshot, where, query, doc, setDoc, getDoc, deleteDoc, orderBy } from \"firebase/firestore\";\nimport { db } from '@/firebase-init';\nimport moment from 'moment';\naxios.defaults.baseURL = 'http://localhost:4001/';\nexport const useUserStore = defineStore('user', {\n  state: () => ({\n    sub: '',\n    email: '',\n    picture: '',\n    firstName: '',\n    lastName: '',\n    emails: []\n  }),\n  actions: {\n    async getUserDetailsFromGoogle(data) {\n      let res = await axios.post('api/google-login', {\n        token: data.credential\n      });\n      this.$state.sub = res.data.sub;\n      this.$state.email = res.data.email;\n      this.$state.picture = res.data.picture;\n      this.$state.firstName = res.data.given_name;\n      this.$state.lastName = res.data.family_name;\n      this.$state.lastName = res.data.family_name;\n    },\n    getEmailsByEmailAddress() {\n      const q = query(collection(db, \"emails\"), where(\"toEmail\", \"==\", this.$state.email), orderBy(\"createdAt\", \"desc\"));\n      onSnapshot(q, querySnapshot => {\n        let resultArray = [];\n        querySnapshot.forEach(doc => {\n          resultArray.push({\n            id: doc.id,\n            firstName: doc.data().firstName,\n            lastName: doc.data().lastName,\n            fromEmail: doc.data().email,\n            toEmail: doc.data().toEmail,\n            subject: doc.data().subject,\n            body: doc.data().body,\n            hasViewed: doc.data().hasViewed,\n            createdAt: moment(doc.data().createdAt).format(\"MMM D HH:mm\")\n          });\n        });\n        this.$state.emails = resultArray;\n      }, error => {\n        console.log(error);\n      });\n    },\n    async getEmailById(id) {\n      const docRef = doc(db, \"emails\", id);\n      const docSnap = await getDoc(docRef);\n      if (docSnap.exists()) {\n        return {\n          id: id,\n          body: docSnap.data().body,\n          createdAt: moment(docSnap.data().createdAt).format(\"MMM D HH:mm\"),\n          firstName: docSnap.data().firstName,\n          fromEmail: docSnap.data().fromEmail,\n          lastName: docSnap.data().lastName,\n          subject: docSnap.data().subject,\n          toEmail: docSnap.data().toEmail,\n          hasViewed: docSnap.data().hasViewed\n        };\n      } else {\n        console.log(\"No such document!\");\n      }\n    },\n    async sendEmail(data) {\n      try {\n        await setDoc(doc(db, \"emails/\" + uuid()), {\n          firstName: this.$state.firstName,\n          lastName: this.$state.lastName,\n          fromEmail: this.$state.email,\n          toEmail: data.toEmail,\n          subject: data.subject,\n          body: data.body,\n          hasViewed: false,\n          createdAt: Date.now()\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    async emailHasBeenViewed(id) {\n      try {\n        await setDoc(doc(db, \"emails/\" + id), {\n          hasViewed: true\n        }, {\n          merge: true\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    async deleteEmail(id) {\n      try {\n        await deleteDoc(doc(db, \"emails\", id));\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    clearUser() {\n      this.$state.firstName = '';\n      this.$state.lastName = '';\n      this.$state.email = '';\n      this.$state.picture = '';\n      this.$state.sub = '';\n      this.$state.emails = [];\n    }\n  },\n  persist: true\n});","map":{"version":3,"names":["defineStore","axios","v4","uuid","collection","onSnapshot","where","query","doc","setDoc","getDoc","deleteDoc","orderBy","db","moment","defaults","baseURL","useUserStore","state","sub","email","picture","firstName","lastName","emails","actions","getUserDetailsFromGoogle","data","res","post","token","credential","$state","given_name","family_name","getEmailsByEmailAddress","q","querySnapshot","resultArray","forEach","push","id","fromEmail","toEmail","subject","body","hasViewed","createdAt","format","error","console","log","getEmailById","docRef","docSnap","exists","sendEmail","Date","now","emailHasBeenViewed","merge","deleteEmail","clearUser","persist"],"sources":["/home/hl_tang/Code/VSCodeWorkSpace/GPTmail/src/store/user-store.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport axios from 'axios'\nimport { v4 as uuid } from 'uuid';\nimport { \n  collection, \n  onSnapshot, \n  where, \n  query, \n  doc, \n  setDoc, \n  getDoc, \n  deleteDoc, \n  orderBy\n} from \"firebase/firestore\";\nimport { db } from '@/firebase-init'\nimport moment from 'moment'\n\naxios.defaults.baseURL = 'http://localhost:4001/'\n\nexport const useUserStore = defineStore('user', {\n  state: () => ({\n    sub: '',\n    email: '',\n    picture: '',\n    firstName: '',\n    lastName: '',\n    emails: []\n  }),\n  actions: {\n    async getUserDetailsFromGoogle(data) {\n        let res = await axios.post('api/google-login', {\n            token: data.credential\n        })\n\n        this.$state.sub = res.data.sub\n        this.$state.email = res.data.email\n        this.$state.picture = res.data.picture\n        this.$state.firstName = res.data.given_name\n        this.$state.lastName = res.data.family_name\n        this.$state.lastName = res.data.family_name\n    },\n\n    getEmailsByEmailAddress() {\n\n      const q = query(collection(db, \"emails\"), where(\"toEmail\", \"==\", this.$state.email), orderBy(\"createdAt\", \"desc\"));\n\n      onSnapshot(q, \n        (querySnapshot) => {\n\n          let resultArray = []\n          querySnapshot.forEach((doc) => {\n            resultArray.push({\n                id: doc.id,\n                firstName: doc.data().firstName,\n                lastName: doc.data().lastName,\n                fromEmail: doc.data().email,\n                toEmail: doc.data().toEmail,\n                subject: doc.data().subject,\n                body: doc.data().body,\n                hasViewed: doc.data().hasViewed,\n                createdAt: moment(doc.data().createdAt).format(\"MMM D HH:mm\")\n              })\n          });\n        this.$state.emails = resultArray\n      }\n      ,(error) => {\n        console.log(error)\n      })\n    },\n\n    async getEmailById(id) {\n\n      const docRef = doc(db, \"emails\", id);\n      const docSnap = await getDoc(docRef);\n\n      if (docSnap.exists()) {\n        return {\n          id: id,\n          body: docSnap.data().body,\n          createdAt: moment(docSnap.data().createdAt).format(\"MMM D HH:mm\"),\n          firstName: docSnap.data().firstName,\n          fromEmail: docSnap.data().fromEmail,\n          lastName: docSnap.data().lastName,\n          subject: docSnap.data().subject,\n          toEmail: docSnap.data().toEmail,\n          hasViewed: docSnap.data().hasViewed,\n        }\n      } else {\n        console.log(\"No such document!\");\n      }\n    },\n\n    async sendEmail(data) {\n      try {\n        await setDoc(doc(db, \"emails/\" + uuid()), {\n          firstName: this.$state.firstName,\n          lastName: this.$state.lastName,\n          fromEmail: this.$state.email,\n          toEmail: data.toEmail,\n          subject: data.subject,\n          body: data.body,\n          hasViewed: false,\n          createdAt: Date.now()\n        });\n      } catch (error) {\n        console.log(error)\n      }\n    },\n\n    async emailHasBeenViewed(id) {\n      try {\n        await setDoc(doc(db, \"emails/\" + id), {\n          hasViewed: true,\n        }, { merge: true });\n      } catch (error) {\n        console.log(error)\n      }\n    },\n\n    async deleteEmail(id) {\n      try {\n        await deleteDoc(doc(db, \"emails\", id));\n      } catch (error) {\n        console.log(error)\n      }\n    },\n\n    clearUser() {\n        this.$state.firstName = ''\n        this.$state.lastName = ''\n        this.$state.email = ''\n        this.$state.picture = ''\n        this.$state.sub = ''\n        this.$state.emails = []\n    }\n  },\n  persist: true\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}